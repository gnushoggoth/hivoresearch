use image::{DynamicImage, GenericImageView, ImageBuffer, Rgba};
use rand::Rng;

/// Represents different glitch algorithms
#[derive(Debug, Clone)]
enum GlitchAlgorithm {
    ChromaticDisplacement,
    PixelSorting,
    DataBending,
    WaveDistortion,
}

/// Glitch processing configuration
#[derive(Debug, Clone)]
struct GlitchConfig {
    algorithm: GlitchAlgorithm,
    intensity: f32,
    seed: u64,
}

/// Core glitch processing struct
struct GlitchProcessor {
    config: GlitchConfig,
}

impl GlitchProcessor {
    /// Create a new glitch processor
    fn new(config: GlitchConfig) -> Self {
        Self { config }
    }

    /// Apply glitch effect to an image
    fn process(&self, image: &DynamicImage) -> DynamicImage {
        match self.config.algorithm {
            GlitchAlgorithm::ChromaticDisplacement => 
                self.chromatic_displacement(image),
            GlitchAlgorithm::PixelSorting => 
                self.pixel_sorting(image),
            GlitchAlgorithm::DataBending => 
                self.data_bending(image),
            GlitchAlgorithm::WaveDistortion => 
                self.wave_distortion(image),
        }
    }

    /// Chromatic displacement glitch
    fn chromatic_displacement(&self, image: &DynamicImage) -> DynamicImage {
        let (width, height) = image.dimensions();
        let mut output = ImageBuffer::new(width, height);
        let mut rng = rand::rngs::StdRng::seed_from_u64(self.config.seed);

        for (x, y, pixel) in image.pixels() {
            // Simulate chromatic aberration
            let offset_r = rng.gen_range(-10..10) as i32;
            let offset_b = rng.gen_range(-10..10) as i32;

            let r_pixel = image.get_pixel(
                (x as i32 + offset_r).clamp(0, width as i32 - 1) as u32, 
                (y as i32 + offset_r).clamp(0, height as i32 - 1) as u32
            );
            
            let b_pixel = image.get_pixel(
                (x as i32 + offset_b).clamp(0, width as i32 - 1) as u32, 
                (y as i32 + offset_b).clamp(0, height as i32 - 1) as u32
            );

            output.put_pixel(x, y, Rgba([
                r_pixel[0],
                pixel[1],
                b_pixel[2],
                pixel[3]
            ]));
        }

        DynamicImage::ImageRgba8(output)
    }

    /// Pixel sorting glitch effect
    fn pixel_sorting(&self, image: &DynamicImage) -> DynamicImage {
        let (width, height) = image.dimensions();
        let mut output = image.to_rgba8();

        for y in 0..height {
            let mut row = (0..width)
                .map(|x| output.get_pixel(x, y).clone())
                .collect::<Vec<_>>();
            
            // Sort pixels based on brightness
            row.sort_by(|a, b| {
                let brightness_a = (a[0] as f32 * 0.299 + a[1] as f32 * 0.587 + a[2] as f32 * 0.114);
                let brightness_b = (b[0] as f32 * 0.299 + b[1] as f32 * 0.587 + b[2] as f32 * 0.114);
                brightness_a.partial_cmp(&brightness_b).unwrap()
            });

            for (x, pixel) in row.into_iter().enumerate() {
                output.put_pixel(x as u32, y, pixel);
            }
        }

        DynamicImage::ImageRgba8(output)
    }

    /// Data bending simulation
    fn data_bending(&self, image: &DynamicImage) -> DynamicImage {
        let (width, height) = image.dimensions();
        let mut output = image.to_rgba8();
        let mut rng = rand::rngs::StdRng::seed_from_u64(self.config.seed);

        for y in 0..height {
            for x in 0..width {
                let pixel = output.get_pixel(x, y);
                
                // Introduce controlled randomness
                let r = pixel[0].wrapping_add(rng.gen_range(0..20));
                let g = pixel[1].wrapping_sub(rng.gen_range(0..20));
                let b = pixel[2].wrapping_mul(rng.gen_range(1..3));

                output.put_pixel(x, y, Rgba([